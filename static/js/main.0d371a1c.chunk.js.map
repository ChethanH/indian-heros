{"version":3,"sources":["images/logo.png","images/alphabets.png","images/social-media/linkedin.png","images/social-media/instagram.png","images/social-media/facebook.png","images/social-media/twitter.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","heros","alphabetsArray","App","props","state","alphaChar","callAlpha","bind","event","preventDefault","this","setState","renderDiv","className","value","loop","Infinity","wrapper","steps","href","src","logo","alt","alpha","onClick","Component","Footer","target","SocialMedia","title","linkedin","twitter","facebook","instagram","Learn","map","ele","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,6SCUrCC,G,MAAQ,CAAC,iBAAkB,IACjC,eAAgB,IAChB,uBAAwB,IACxB,mBAAoB,IACpB,0BAA2B,IAC3B,uBAAwB,IACxB,sBAAuB,IACvB,gBAAiB,IACjB,0BACA,mBAAoB,IACpB,6BAA8B,IAC9B,sBAAuB,IACvB,6BAA8B,IAC9B,0BAA2B,IAC3B,0BAA2B,IAC3B,mBAAoB,IACpB,0BAA2B,IAC3B,mBAAoB,IACpB,uBAAwB,IACxB,cAAe,IACf,cAAe,IACf,2BAA4B,IAC5B,uBAAwB,IACxB,0BAA2B,IAC3B,0BAA2B,IAC3B,0BAA2B,MAErBC,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE/IC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,UAAW,IAC1B,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAHA,E,sDAKTC,GACRA,EAAMC,iBACNC,KAAKC,SAAS,CAACN,UAAW,gB,+BAG1B,IAAIO,EAcJ,OAZEA,EAD0B,cAAzBF,KAAKN,MAAMC,UACA,yBAAKQ,UAAU,wBACb,kBAAC,EAAD,CAAOC,MAAOb,KAGhB,yBAAKY,UAAU,eACb,kBAAC,IAAD,CACEE,KAAMC,IACNC,QAAQ,IACRC,MAAOlB,KAKvB,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGM,KAAK,KACN,yBAAKC,IAAKC,IAAMR,UAAU,WAAWS,IAAI,UAE3C,uBAAGH,KAAK,KACN,yBAAKC,IAAKG,IAAOV,UAAU,YAAYS,IAAI,YAAYE,QAASd,KAAKJ,aAEtEM,EACD,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GApCQa,aA2CZC,EAAS,WACb,OACE,4BAAQb,UAAU,IAChB,8CAAmB,uBAAGM,KAAK,kDAAkDQ,OAAO,UAAjE,gBAKnBC,EAAc,WAClB,OACE,yBAAKf,UAAU,qBACb,0BAAMA,UAAU,eACd,4BACE,uBAAGM,KAAK,kDAAkDQ,OAAO,SAASE,MAAM,YAC9E,4BAAI,yBAAKT,IAAKU,IAAUjB,UAAU,qBAAqBS,IAAI,eAE7D,uBAAGH,KAAK,kCAAkCQ,OAAO,SAASE,MAAM,WAC9D,4BAAI,yBAAKT,IAAKW,IAASlB,UAAU,qBAAqBS,IAAI,cAE5D,uBAAGH,KAAK,yCAAyCQ,OAAO,SAASE,MAAM,YACrE,4BAAI,yBAAKT,IAAKY,IAAUnB,UAAU,qBAAqBS,IAAI,eAE7D,uBAAGH,KAAK,2CAA2CQ,OAAO,SAASE,MAAM,aACvE,4BAAI,yBAAKT,IAAKa,IAAWpB,UAAU,qBAAqBS,IAAI,oBAQlEY,EAAQ,SAAC/B,GAOb,OANaA,EAAMW,MACIqB,KAAI,SAAAC,GAAG,OAC5B,0BAAMvB,UAAU,aAAawB,IAAKD,GAChC,6BAAMA,QAQGlC,ICjHKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d371a1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6f66336.png\";","module.exports = __webpack_public_path__ + \"static/media/alphabets.7693a470.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.de38ce24.png\";","module.exports = __webpack_public_path__ + \"static/media/instagram.5ab0c78c.png\";","module.exports = __webpack_public_path__ + \"static/media/facebook.98d9d23b.png\";","module.exports = __webpack_public_path__ + \"static/media/twitter.64452ef4.png\";","import React, { Component } from 'react';\nimport Typical from 'react-typical';\nimport logo from '../src/images/logo.png';\nimport alpha from '../src/images/alphabets.png';\nimport linkedin from '../src/images/social-media/linkedin.png';\nimport instagram from '../src/images/social-media/instagram.png';\nimport facebook from '../src/images/social-media/facebook.png';\nimport twitter from '../src/images/social-media/twitter.png';\nimport './App.css';\n\nconst heros = [\"Abbakka Chowta\", 1000,\n\"Bhagat Singh\", 1000,\n\"Chandra Shekhar Azad\", 1000,\n\"Dadabhai Naoroji\", 1000,\n\"E [Suggestion Required]\", 1000,\n\"Fazle Haq Khairabadi\", 1000,\n\"Govind Ballabh Pant\", 1000,\n\"Hasrat Mohani\", 1000,\n\"I [Suggestion Required]\",\n\"Jawaharlal Nehru\", 1000,\n\"Kanaiyalal Maneklal Munshi\", 1000,\n\"Lal Bahadur Shastri\", 1000,\n\"Mohandas Karamchand Gandhi\", 1000,\n\"N [Suggestion Required]\", 1000,\n\"O [Suggestion Required]\", 1000,\n\"Pingali Venkayya\", 1000,\n\"Q [Suggestion Required]\", 1000,\n\"Rani Lakshmi Bai\", 1000,\n\"Subhash Chandra Bose\", 1000,\n\"Tantia Tope\", 1000,\n\"Udham Singh\", 1000,\n\"Vinayak Damodar Savarkar\", 1000,\n\"War Batukeshwar Dutt\", 1000,\n\"X [Suggestion Required]\", 1000,\n\"Y [Suggestion Required]\", 1000,\n\"Z [Suggestion Required]\", 1000];\n\nconst alphabetsArray = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { alphaChar: \"\" }\n    this.callAlpha = this.callAlpha.bind(this);\n  }\n  callAlpha(event){\n    event.preventDefault();\n    this.setState({alphaChar: \"alphabets\"});\n  } \n  render () {\n    let renderDiv;\n    if(this.state.alphaChar === \"alphabets\") {\n      renderDiv = <div className=\"characters-container\">\n                    <Learn value={alphabetsArray} />\n                  </div>\n    } else {\n      renderDiv = <div className=\"heroes-name\">\n                    <Typical \n                      loop={Infinity}\n                      wrapper=\"b\"\n                      steps={heros}\n                    />\n                  </div>\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"#\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </a>\n          <a href=\"#\">\n            <img src={alpha} className=\"alphabets\" alt=\"alphabets\" onClick={this.callAlpha}/>\n          </a>\n          {renderDiv}\n          <Footer />\n          <SocialMedia />\n        </header>\n      </div>\n    );\n  }\n}\n\nconst Footer = () => {\n  return(\n    <footer className=\"\">\n      <span>Developed by <a href=\"https://www.linkedin.com/in/chethan-h-21545493/\" target=\"_blank\">Chethan H</a></span>\n    </footer>\n  );\n}\n\nconst SocialMedia = () => {\n  return(\n    <div className=\"social-media-icon\">\n      <span className=\"media-icons\">\n        <ul>\n          <a href=\"https://www.linkedin.com/in/chethan-h-21545493/\" target=\"_blank\" title=\"Linkedin\">\n            <li><img src={linkedin} className=\"social-media-icons\" alt=\"linkedin\"/></li>\n          </a>\n          <a href=\"https://twitter.com/ChethanHanu\" target=\"_blank\" title=\"Twitter\">\n            <li><img src={twitter} className=\"social-media-icons\" alt=\"twitter\"/></li>\n          </a>\n          <a href=\"https://www.facebook.com/chethan.hanu/\" target=\"_blank\" title=\"Facebook\">\n            <li><img src={facebook} className=\"social-media-icons\" alt=\"facebook\"/></li>\n          </a>\n          <a href=\"https://www.instagram.com/chethan_cheth/\" target=\"_blank\" title=\"Instagram\">\n            <li><img src={instagram} className=\"social-media-icons\" alt=\"instagram\"/></li>\n          </a>\n        </ul>\n      </span>\n    </div>\n  );\n}\n\nconst Learn = (props) => {\n  const char = props.value;\n  const renderEle = char.map(ele => \n    <span className=\"characters\" key={ele}>\n      <kbd>{ele}</kbd>\n    </span>\n  );\n  return(\n    renderEle\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}